alias funcNum R1;


if(funcNum == ACQUIRE_TERMINAL) then
    alias currPid R2;
	while(([TERMINAL_STATUS_TABLE]) == 1) do
		[PROCESS_TABLE + (currPid*16) + 4] = WAIT_TERMINAL;
		multipush(R0,R1,R2,R3,R4);
		call MOD_5;
		multipop(R0,R1,R2,R3,R4);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currPid;
	return;
endif;

if(funcNum == RELEASE_TERMINAL) then
    alias currPid R2;
	if(currPid != [TERMINAL_STATUS_TABLE + 1]) then
		R0 = -1;
		return;
	else
		[TERMINAL_STATUS_TABLE] = 0;
		alias i R4;
		i = 0;
		while(i < 16)	do
			if([PROCESS_TABLE + (i*16) + 4] == WAIT_TERMINAL) then
				[PROCESS_TABLE + ((i*16)) + 4] = READY;
			endif;
			i = i + 1;
		endwhile;
		R0 = 0;
	endif;
	return;
endif;

if(funcNum == ACQUIRE_DISK) then
    alias currPid R2;
	while([DISK_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + (currPid)*16 + 4] = WAIT_DISK;
		backup;
		call MOD_5;
		restore;
	endwhile;
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE + 4] = currPid;
	return;
endif;

if(funcNum == ACQUIRE_SEMAPHORE) then
    alias currPid R2;
    alias i R4;
    i = 0;
    R0 = -1;
    while (i<MAX_SEM_COUNT) do
        if([SEMAPHORE_TABLE + i*4 + 1] == 0) then
            [SEMAPHORE_TABLE + i*4 + 1] = 1;
            [SEMAPHORE_TABLE + i*4 + 0] = -1;
            R0 = i;
            return;
        endif;
        i = i + 1;
    endwhile;
    return;
endif;

if(funcNum == RELEASE_SEMAPHORE) then
    alias currPid R3;
    alias sem_table_idx R2;
    if([SEMAPHORE_TABLE + sem_table_idx*4] == currPid) then 
        [SEMAPHORE_TABLE + sem_table_idx*4] = -1;
        alias i R4;
        i = 0;
        while (i<16) do
            if([PROCESS_TABLE + i*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + i*6 + 5]== sem_table_idx) then
                [PROCESS_TABLE + i*16 + 4] = READY;
            endif;
            i = i + 1;
        endwhile;
    endif;
    [SEMAPHORE_TABLE + sem_table_idx*4 + 1] = [SEMAPHORE_TABLE + sem_table_idx*4 + 1] - 1;
    return;
endif;

if(funcNum == ACQUIRE_INODE) then
    alias curr_pid R2; 
    alias inode_index R3;
    while ([FILE_STATUS_TABLE + 4 * inode_index + 0] != -1) do
        [PROCESS_TABLE + 16*curr_pid + 4] = WAIT_FILE;
        [PROCESS_TABLE + 16*curr_pid + 5] = inode_index;
        backup;
        call MOD_5;
        restore;
    endwhile;
    if([INODE_TABLE + inode_index*16 + 1] == -1) then
        R0 = -1;
        return;
    endif;
    [FILE_STATUS_TABLE + 4*inode_index + 0] = curr_pid;
    R0 = 0;
    return;
endif;

if(funcNum == RELEASE_INODE) then
    alias curr_pid R2;
    alias inode_index R3;
    if([FILE_STATUS_TABLE + 4*inode_index + 0] != curr_pid) then
        R0 = -1;
        return;
    endif;
    [FILE_STATUS_TABLE + 4*inode_index + 0] = -1;
    backup;
    alias i R4;
    i = 0;
    while (i < 16) do
        if([PROCESS_TABLE + i*16 + 4] == WAIT_FILE && [PROCESS_TABLE + i*16 + 5] == inode_index) then
            [PROCESS_TABLE + i*16 + 4] = READY;
        endif;
        i = i + 1;
    endwhile;
    restore;
    R0 = 0;
    return;
endif;

return;