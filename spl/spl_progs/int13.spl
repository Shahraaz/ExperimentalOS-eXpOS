//semget and semrelease sys calls are included in INT13 with syscall nos as 17 and 18

alias userSP R4;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;	//change to kernel stack

alias syscall R5;
syscall = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];	//get the syscall arg

//------------------------------------------SEMGET------------------------------------------------------
//Semget sys call is used to acquire a new semaphore
if (syscall == 17) then
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 17;	//change the mode
	//find a free entry in resource table
	alias i R6;
	alias idx R7;
	alias free_entry R8;
	free_entry = -1;
	
	i = 496;
	while(i<512) do
		if([[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+i] == -1) then
			free_entry = i;
			break;		
		endif;
		i = i + 2;
	endwhile;


	if(free_entry == -1) then	//no free entry in resource table is found
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -1;	//no free entry in resource table
		SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	//reset the mode
		ireturn;
	endif;
	
	multipush(R3,R4,R5,R6,R7,R8);
	R1 = ACQUIRE_SEMAPHORE;
	R2 = [SYSTEM_STATUS_TABLE+1];
	call MOD_0;	
	multipop(R3,R4,R5,R6,R7,R8);
	
	if(R0 == -1) then
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -2;	//no free entry in semaphore table
		SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	//reset the mode
		ireturn;
	else
		[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+i] = 1;
		[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+i+1] = R0;

		idx = (free_entry-496)/2;
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = idx;	//semID is returned
		SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	//reset the mode

		ireturn;
	endif;
endif;
//-------------------------------------------------------------------------------------------------------

//------------------------------------------SEMRELEASE---------------------------------------------------
//SemID is passed as an arg which is to be released by the process
if (syscall == 18) then
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 18;	//change the mode
	alias semID R7;
	semID = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
	alias user_area_page R8;
	user_area_page = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11];

	//---------------check if the semID is valid in range[0,7]------------------------------
	//if not valid return -1
	if((semID<0) || (semID>7) || ([user_area_page*512 + 496 + 2*semID] != 1)) then
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -1;
		SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	//reset the mode
		ireturn;
	endif;
	//---------------------------------------------------------------------------------------

	backup;
	R1 = RELEASE_SEMAPHORE;
	R2 = [user_area_page*512+496 + semID*2 + 1];	//sempahore table index
	R3 = [SYSTEM_STATUS_TABLE+1]; 
	call MOD_0;
	restore;
	
	[user_area_page*512 + 496 + 2*semID] = -1;	//invalidate the resource table entry

	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;	//indicates success
	SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];		//change to user stack
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	//reset the mode

	ireturn;
endif;
//------------------------------------------------------------------------------------------------------

ireturn;
